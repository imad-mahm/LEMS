CREATE TABLE LOCATION (
    LOCATIONID INT PRIMARY KEY,
    ROOM VARCHAR(50),
    BUILDING VARCHAR(255),
    CAMPUS VARCHAR(255)
);

CREATE TABLE `EVENT` (
    EVENTID INT PRIMARY KEY AUTO_INCREMENT,
    EVENT_NAME VARCHAR(255),
    EVENT_DESCRIPTION TEXT,
    DURATION INT,  -- DURATION IN MINUTES (OR ANY UNIT YOU PREFER)
    -- TIME COMPOSITE ATTRIBUTE: SPLIT INTO TWO COLUMNS:
    START_TIME DATETIME,
    END_TIME DATETIME,
    LOCATIONID INT,
    FOREIGN KEY (LOCATIONID) REFERENCES `LOCATION`(LOCATIONID)
);

CREATE TABLE `USER` (
    LAU_EMAIL VARCHAR(255) PRIMARY KEY,
    USER_ROLE VARCHAR(50),
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255)
);

CREATE TABLE CLUB (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CLUB_NAME VARCHAR(255),
    CLUB_DESCRIPTION TEXT,
    CLUB_EMAIL VARCHAR(255) NOT NULL
);

CREATE TABLE NOTIFICATION (
    NOTIFICATIONID INT PRIMARY KEY,
    CONTENTS TEXT,
    EVENTID INT,
    FOREIGN KEY (EVENTID) REFERENCES `EVENT`(EVENTID),
    CLUBID INT,
    FOREIGN KEY (CLUBID) REFERENCES `CLUB`(ID)
);

CREATE TABLE CLUB_USER (
    LAU_EMAIL VARCHAR(255),
    CLUBID INT,
    PRIMARY KEY (LAU_EMAIL, CLUBID),
    FOREIGN KEY (LAU_EMAIL) REFERENCES `USER`(LAU_EMAIL),
    FOREIGN KEY (CLUBID) REFERENCES `CLUB`(ID)
);

CREATE TABLE TRANSCRIPT (
    TRANSCRIPTID INT PRIMARY KEY,
    ACADEMIC_YEAR INT,
    MAJOR VARCHAR(255),
    USEREMAIL VARCHAR(255),
    FOREIGN KEY (USEREMAIL) REFERENCES `USER`(LAU_Email)
);

CREATE TABLE TRANSCRIPT_FREE_TIME (
    LAU_Email VARCHAR(255),
    DayOfWeek ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'),
    StartHour TIME,
    EndHour TIME,
    PRIMARY KEY (LAU_Email, DayOfWeek, StartHour),
    FOREIGN KEY (LAU_Email) REFERENCES User(LAU_Email)
);

CREATE TABLE COMMITTEE (
    CLUBID INT,
    ACADEMIC_YEAR INT,
    PRESIDENT VARCHAR(255),
    SECRETARY VARCHAR(255),
    TREASURER VARCHAR(255),
    PRIMARY KEY (CLUBID, ACADEMIC_YEAR),
    FOREIGN KEY (CLUBID) REFERENCES CLUB(ID)
);


CREATE TABLE REGISTRATION (
    LAU_EMAIL VARCHAR(255),
    EVENTID INT,
    TICKET_NB INT,
    TIME_STAMP DATETIME,
    FEES DECIMAL(5,2),
    PRIMARY KEY (LAU_EMAIL, EVENTID, TICKET_NB),
    FOREIGN KEY (LAU_EMAIL) REFERENCES USER(LAU_EMAIL),
    FOREIGN KEY (EVENTID) REFERENCES EVENT(EVENTID)
);

CREATE TABLE FEEDBACK (
    REVIEWID INT PRIMARY KEY,
    AI_EVAL TEXT,
    RATING INT,
    CONTENT TEXT,
    -- RELATIONSHIPS:
    LAU_EMAIL VARCHAR(255),
    EVENTID INT,
    FOREIGN KEY (LAU_EMAIL) REFERENCES USER(LAU_EMAIL),
    FOREIGN KEY (EVENTID) REFERENCES EVENT(EVENTID)
);

CREATE TABLE LIVESTREAM (
    STREAM_URL VARCHAR(255) PRIMARY KEY,
    SOURCE VARCHAR(255),
    ORIGINAL_QUALITY VARCHAR(50),
    VIEWS INT,
    DURATION INT,  -- DURATION IN SECONDS (OR YOUR PREFERRED UNIT)
    EVENTID INT,
    FOREIGN KEY (EVENTID) REFERENCES EVENT(EVENTID)
);

-- NOTE: PARTNER HAS THE FK EVENTID (I.E. EACH PARTNER IS LINKED TO AN EVENT)
CREATE TABLE PARTNER (
    PARTNERID INT PRIMARY KEY,
    PARTNER_EMAIL VARCHAR(255)
);
-- JUNCTION TABLE FOR NOTIFICATION AND USER (N:M RELATIONSHIP)
CREATE TABLE NOTIFICATION_USER (
    NOTIFICATIONID INT,
    LAU_EMAIL VARCHAR(255),
    PRIMARY KEY (NOTIFICATIONID, LAU_EMAIL),
    FOREIGN KEY (NOTIFICATIONID) REFERENCES NOTIFICATION(NOTIFICATIONID),
    FOREIGN KEY (LAU_EMAIL) REFERENCES USER(LAU_EMAIL)
);

CREATE TABLE EVENT_PARTNER (
    EVENTID INT,
    PARTNERID INT,
    PRIMARY KEY (EVENTID, PARTNERID),
    FOREIGN KEY (EVENTID) REFERENCES EVENT(EVENTID),
    FOREIGN KEY (PARTNERID) REFERENCES PARTNER(PARTNERID)
);

CREATE TABLE EVENT_CLUB (
    EVENTID INT,
    CLUBID INT,
    EXCLUSIVE BOOLEAN,
    PRIMARY KEY (EVENTID, CLUBID),
    FOREIGN KEY (EVENTID) REFERENCES EVENT(EVENTID),
    FOREIGN KEY (CLUBID) REFERENCES CLUB(ID)
);

-- MULTIVALUED ATTRIBUTE TABLES (NORMALIZED)

-- USER.PREFERENCES (MV ATTRIBUTE)
CREATE TABLE USER_PREFERENCES (
    LAU_EMAIL VARCHAR(255),
    PREFERENCE VARCHAR(255),
    PRIMARY KEY (LAU_EMAIL, PREFERENCE),
    FOREIGN KEY (LAU_EMAIL) REFERENCES USER(LAU_EMAIL)
);

-- USER.ATTENDED_EVENTS (COMPOSITE MV ATTRIBUTE: EVENTID, DATE_ATTENDED)
CREATE TABLE USER_ATTENDED_EVENTS (
    LAU_EMAIL VARCHAR(255),
    EVENTID INT,
    DATE_ATTENDED DATE,
    PRIMARY KEY (LAU_EMAIL, EVENTID),
    FOREIGN KEY (LAU_EMAIL) REFERENCES USER(LAU_EMAIL),
    FOREIGN KEY (EVENTID) REFERENCES EVENT(EVENTID)
);

-- TRANSCRIPT.ELECTIVES (MV ATTRIBUTE)
CREATE TABLE TRANSCRIPT_ELECTIVES (
    TRANSCRIPTID INT,
    ELECTIVE VARCHAR(255),
    PRIMARY KEY (TRANSCRIPTID, ELECTIVE),
    FOREIGN KEY (TRANSCRIPTID) REFERENCES TRANSCRIPT(TRANSCRIPTID)
);

-- EVENT.TAGS (MV ATTRIBUTE)
CREATE TABLE EVENT_TAGS (
    EVENTID INT,
    TAG VARCHAR(100),
    PRIMARY KEY (EVENTID, TAG),
    FOREIGN KEY (EVENTID) REFERENCES EVENT(EVENTID)
);

-- PARTNER.REPRESENTATIVE (COMPOSITE MV ATTRIBUTE: FIRST, LAST, DESCRIPTION)
CREATE TABLE PARTNER_REPRESENTATIVE (
    PARTNERID INT,
    REP_FIRST VARCHAR(255),
    REP_LAST VARCHAR(255),
    REP_DESCRIPTION TEXT,
    PRIMARY KEY (PARTNERID, REP_FIRST, REP_LAST),
    FOREIGN KEY (PARTNERID) REFERENCES PARTNER(PARTNERID)
);
